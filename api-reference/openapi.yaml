openapi: 3.1.0
servers:
  - url: https://platform.ground.dev
    description: Main server
  - url: http://localhost:3000/
    description: Dev server
    
info:
  title: Ground's API
  version: 0.0.0
  description: |-
    Ground's description in [CommonMark](http://commonmark.org/help/) or HTML.

    The Ground API allows developers to create RAGs. To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://www.ground.dev/Auth).
    All endpoints are available via `https` and are located at `www.ground.dev/api/`.

    For instance you can list all documents for an account via GET `https://www.ground.dev/api/documents`.
  contact:
    name: Ground's contact
    email: contact@ground.dev
    # x-twitter: Ground
  x-logo:
    url: https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRMS7PEwClnFWa8NqF1ZB5CArGuNwcWc2Bc55Yk-ScuTQ&s
security:
  - bearerToken: []
tags: []
paths:
  "/api/documents":
    get:
      summary: List Documents
      description: |+
        List all the documents that have been uploaded by an account.
      operationId: ListDocuments
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IndexedDocument'
    post:
      summary: Upload Document
      description: |+
        Upload and embed a document.
      operationId: UploadDocument
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                document:
                  type: string
                  format: binary
      responses:
        "200":
          description: Successful response
          content:
            text/plain:
              schema:
                type: string
                enum:
                  - "OK"
                title: default success response
    delete:
      summary: Delete Document
      description: |+
        Delete a document by name.
      operationId: DeleteDocument
      parameters:
      - name: filename
        in: query
        required: true
        description: File to delete
        schema:
          type: string
      responses:
        "204":
          description: Successful response
  "/api/search/rrf":
    get:
      summary: Hybrid Search
      description: |+
        Get ranked results.
      operationId: HybridSearchRRF
      parameters:
      - name: query
        in: query
        description: User query
        required: true
        schema:
          type: string
          style: simple
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
  "/api/search/dense":
    get:
      summary: Dense Search
      description: |+
        Get ranked results.
      operationId: DenseSearchRankings
      parameters:
      - name: query
        in: query
        description: User query
        required: true
        schema:
          type: string
          style: simple
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
  "/api/prompt":
    get:
      summary: Prompt
      description: |+
        Get answer to prompt.
      operationId: QAPrompt
      parameters:
      - name: query
        in: query
        description: User query
        required: true
        schema:
          type: string
          style: simple
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: string

components:
  securitySchemes:
    bearerToken:            # arbitrary name for the security scheme
      description: API key with bearer token format
      type: http
      scheme: bearer
      bearerFormat: string
  schemas:                  # create types here so paths is readable
    IndexedDocument:
      type: object
      properties: 
        etag:
          type: string
          format: uuid
        key:
          type: string
        indexed:
          type: boolean
        lastModifiedAt: 
          type: string
          format: date-time
    SearchResponse:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            format: uuid
          score:
            type: number
          payload:
            type: object
            properties:
              chunk:
                type: string
              parent_document_key:
                type: string
